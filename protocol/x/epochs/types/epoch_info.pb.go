// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nemo_network/epochs/epoch_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EpochInfo stores metadata of an epoch timer.
type EpochInfo struct {
	// name is the unique identifier.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// next_tick indicates when the next epoch starts (in Unix Epoch seconds),
	// if `EpochInfo` has been initialized.
	// If `EpochInfo` is not initialized yet, `next_tick` indicates the earliest
	// initialization time (see `is_initialized` below).
	NextTick uint32 `protobuf:"varint,2,opt,name=next_tick,json=nextTick,proto3" json:"next_tick,omitempty"`
	// duration of the epoch in seconds.
	Duration uint32 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// current epoch is the number of the current epoch.
	// 0 if `next_tick` has never been reached, positive otherwise.
	CurrentEpoch uint32 `protobuf:"varint,4,opt,name=current_epoch,json=currentEpoch,proto3" json:"current_epoch,omitempty"`
	// current_epoch_start_block indicates the block height when the current
	// epoch started. 0 if `current_epoch` is 0.
	CurrentEpochStartBlock uint32 `protobuf:"varint,5,opt,name=current_epoch_start_block,json=currentEpochStartBlock,proto3" json:"current_epoch_start_block,omitempty"`
	// is_initialized indicates whether the `EpochInfo` has been initialized
	// and started ticking.
	// An `EpochInfo` is initialized when all below conditions are true:
	// - Not yet initialized
	// - `BlockHeight` >= 2
	// - `BlockTime` >= `next_tick`
	IsInitialized bool `protobuf:"varint,6,opt,name=is_initialized,json=isInitialized,proto3" json:"is_initialized,omitempty"`
	// fast_forward_next_tick specifies whether during initialization, `next_tick`
	// should be fast-forwarded to be greater than the current block time.
	// If `false`, the original `next_tick` value is
	// unchanged during initialization.
	// If `true`, `next_tick` will be set to the smallest value `x` greater than
	// the current block time such that `(x - next_tick) % duration = 0`.
	FastForwardNextTick bool `protobuf:"varint,7,opt,name=fast_forward_next_tick,json=fastForwardNextTick,proto3" json:"fast_forward_next_tick,omitempty"`
}

func (m *EpochInfo) Reset()         { *m = EpochInfo{} }
func (m *EpochInfo) String() string { return proto.CompactTextString(m) }
func (*EpochInfo) ProtoMessage()    {}
func (*EpochInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_83f3c2fae3b0801d, []int{0}
}
func (m *EpochInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochInfo.Merge(m, src)
}
func (m *EpochInfo) XXX_Size() int {
	return m.Size()
}
func (m *EpochInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EpochInfo proto.InternalMessageInfo

func (m *EpochInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EpochInfo) GetNextTick() uint32 {
	if m != nil {
		return m.NextTick
	}
	return 0
}

func (m *EpochInfo) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *EpochInfo) GetCurrentEpoch() uint32 {
	if m != nil {
		return m.CurrentEpoch
	}
	return 0
}

func (m *EpochInfo) GetCurrentEpochStartBlock() uint32 {
	if m != nil {
		return m.CurrentEpochStartBlock
	}
	return 0
}

func (m *EpochInfo) GetIsInitialized() bool {
	if m != nil {
		return m.IsInitialized
	}
	return false
}

func (m *EpochInfo) GetFastForwardNextTick() bool {
	if m != nil {
		return m.FastForwardNextTick
	}
	return false
}

func init() {
	proto.RegisterType((*EpochInfo)(nil), "nemo_network.epochs.EpochInfo")
}

func init() {
	proto.RegisterFile("nemo_network/epochs/epoch_info.proto", fileDescriptor_83f3c2fae3b0801d)
}

var fileDescriptor_83f3c2fae3b0801d = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xbf, 0x4e, 0x02, 0x41,
	0x10, 0xc6, 0x59, 0x44, 0x84, 0x8d, 0x58, 0x2c, 0x09, 0x39, 0x35, 0xb9, 0x10, 0xff, 0x24, 0x34,
	0x70, 0x05, 0x16, 0xda, 0x92, 0x68, 0x42, 0x63, 0x71, 0x5a, 0xd9, 0x6c, 0x96, 0x65, 0x4f, 0x36,
	0x07, 0x3b, 0x64, 0x6f, 0x10, 0xf4, 0x29, 0x2c, 0x7c, 0x28, 0x4b, 0x4a, 0x4b, 0x03, 0x2f, 0x62,
	0x76, 0x0f, 0x02, 0x56, 0x3b, 0xfb, 0xfd, 0xbe, 0xc9, 0x64, 0xbe, 0xa1, 0x57, 0x46, 0x4d, 0x80,
	0x1b, 0x85, 0x73, 0xb0, 0x69, 0xa4, 0xa6, 0x20, 0x47, 0x59, 0xfe, 0x70, 0x6d, 0x12, 0xe8, 0x4c,
	0x2d, 0x20, 0xb0, 0xfa, 0xbe, 0xab, 0x93, 0xbb, 0x2e, 0xbe, 0x8a, 0xb4, 0x7a, 0xef, 0xca, 0xbe,
	0x49, 0x80, 0x31, 0x5a, 0x32, 0x62, 0xa2, 0x02, 0xd2, 0x24, 0xad, 0x6a, 0xec, 0x6b, 0x76, 0x4e,
	0xab, 0x46, 0x2d, 0x90, 0xa3, 0x96, 0x69, 0x50, 0x6c, 0x92, 0x56, 0x2d, 0xae, 0x38, 0xe1, 0x59,
	0xcb, 0x94, 0x9d, 0xd1, 0xca, 0x70, 0x66, 0x05, 0x6a, 0x30, 0xc1, 0x41, 0xce, 0xb6, 0x7f, 0x76,
	0x49, 0x6b, 0x72, 0x66, 0xad, 0x32, 0xc8, 0xfd, 0xb0, 0xa0, 0xe4, 0x0d, 0xc7, 0x1b, 0xd1, 0x4f,
	0x65, 0x77, 0xf4, 0xf4, 0x9f, 0x89, 0x67, 0x28, 0x2c, 0xf2, 0xc1, 0x18, 0x64, 0x1a, 0x1c, 0xfa,
	0x86, 0xc6, 0x7e, 0xc3, 0x93, 0xc3, 0x3d, 0x47, 0xd9, 0x35, 0x3d, 0xd1, 0x19, 0xd7, 0x46, 0xa3,
	0x16, 0x63, 0xfd, 0xa1, 0x86, 0x41, 0xb9, 0x49, 0x5a, 0x95, 0xb8, 0xa6, 0xb3, 0xfe, 0x4e, 0x64,
	0x5d, 0xda, 0x48, 0x44, 0x86, 0x3c, 0x01, 0x3b, 0x17, 0x76, 0xc8, 0x77, 0xcb, 0x1c, 0x79, 0x7b,
	0xdd, 0xd1, 0x87, 0x1c, 0x3e, 0x6e, 0xf6, 0xea, 0xc5, 0xdf, 0xab, 0x90, 0x2c, 0x57, 0x21, 0xf9,
	0x5d, 0x85, 0xe4, 0x73, 0x1d, 0x16, 0x96, 0xeb, 0xb0, 0xf0, 0xb3, 0x0e, 0x0b, 0x2f, 0xb7, 0xaf,
	0x1a, 0x47, 0xb3, 0x41, 0x47, 0xc2, 0x24, 0x72, 0x81, 0xb6, 0xb7, 0xb1, 0xbf, 0xdd, 0xb4, 0xe5,
	0x48, 0x68, 0x13, 0xf9, 0xb4, 0x25, 0x8c, 0xa3, 0xc5, 0xf6, 0x14, 0xf8, 0x3e, 0x55, 0xd9, 0xa0,
	0xec, 0x41, 0xf7, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xef, 0xb0, 0x65, 0xab, 0xae, 0x01, 0x00, 0x00,
}

func (m *EpochInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FastForwardNextTick {
		i--
		if m.FastForwardNextTick {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IsInitialized {
		i--
		if m.IsInitialized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.CurrentEpochStartBlock != 0 {
		i = encodeVarintEpochInfo(dAtA, i, uint64(m.CurrentEpochStartBlock))
		i--
		dAtA[i] = 0x28
	}
	if m.CurrentEpoch != 0 {
		i = encodeVarintEpochInfo(dAtA, i, uint64(m.CurrentEpoch))
		i--
		dAtA[i] = 0x20
	}
	if m.Duration != 0 {
		i = encodeVarintEpochInfo(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if m.NextTick != 0 {
		i = encodeVarintEpochInfo(dAtA, i, uint64(m.NextTick))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEpochInfo(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEpochInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovEpochInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EpochInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEpochInfo(uint64(l))
	}
	if m.NextTick != 0 {
		n += 1 + sovEpochInfo(uint64(m.NextTick))
	}
	if m.Duration != 0 {
		n += 1 + sovEpochInfo(uint64(m.Duration))
	}
	if m.CurrentEpoch != 0 {
		n += 1 + sovEpochInfo(uint64(m.CurrentEpoch))
	}
	if m.CurrentEpochStartBlock != 0 {
		n += 1 + sovEpochInfo(uint64(m.CurrentEpochStartBlock))
	}
	if m.IsInitialized {
		n += 2
	}
	if m.FastForwardNextTick {
		n += 2
	}
	return n
}

func sovEpochInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEpochInfo(x uint64) (n int) {
	return sovEpochInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EpochInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTick", wireType)
			}
			m.NextTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextTick |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpoch", wireType)
			}
			m.CurrentEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochStartBlock", wireType)
			}
			m.CurrentEpochStartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpochStartBlock |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInitialized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInitialized = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastForwardNextTick", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FastForwardNextTick = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEpochInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEpochInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEpochInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEpochInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEpochInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEpochInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEpochInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEpochInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEpochInfo = fmt.Errorf("proto: unexpected end of group")
)
