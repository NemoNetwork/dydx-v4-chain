// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nemo_network/prices/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryMarketPriceRequest is request type for the Query/Params `MarketPrice`
// RPC method.
type QueryMarketPriceRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryMarketPriceRequest) Reset()         { *m = QueryMarketPriceRequest{} }
func (m *QueryMarketPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMarketPriceRequest) ProtoMessage()    {}
func (*QueryMarketPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_39ef88a1bd2264a7, []int{0}
}
func (m *QueryMarketPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketPriceRequest.Merge(m, src)
}
func (m *QueryMarketPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketPriceRequest proto.InternalMessageInfo

func (m *QueryMarketPriceRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryMarketPriceResponse is response type for the Query/Params `MarketPrice`
// RPC method.
type QueryMarketPriceResponse struct {
	MarketPrice MarketPrice `protobuf:"bytes,1,opt,name=market_price,json=marketPrice,proto3" json:"market_price"`
}

func (m *QueryMarketPriceResponse) Reset()         { *m = QueryMarketPriceResponse{} }
func (m *QueryMarketPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMarketPriceResponse) ProtoMessage()    {}
func (*QueryMarketPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_39ef88a1bd2264a7, []int{1}
}
func (m *QueryMarketPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketPriceResponse.Merge(m, src)
}
func (m *QueryMarketPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketPriceResponse proto.InternalMessageInfo

func (m *QueryMarketPriceResponse) GetMarketPrice() MarketPrice {
	if m != nil {
		return m.MarketPrice
	}
	return MarketPrice{}
}

// QueryAllMarketPricesRequest is request type for the Query/Params
// `AllMarketPrices` RPC method.
type QueryAllMarketPricesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMarketPricesRequest) Reset()         { *m = QueryAllMarketPricesRequest{} }
func (m *QueryAllMarketPricesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMarketPricesRequest) ProtoMessage()    {}
func (*QueryAllMarketPricesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_39ef88a1bd2264a7, []int{2}
}
func (m *QueryAllMarketPricesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMarketPricesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMarketPricesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMarketPricesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMarketPricesRequest.Merge(m, src)
}
func (m *QueryAllMarketPricesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMarketPricesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMarketPricesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMarketPricesRequest proto.InternalMessageInfo

func (m *QueryAllMarketPricesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllMarketPricesResponse is response type for the Query/Params
// `AllMarketPrices` RPC method.
type QueryAllMarketPricesResponse struct {
	MarketPrices []MarketPrice       `protobuf:"bytes,1,rep,name=market_prices,json=marketPrices,proto3" json:"market_prices"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMarketPricesResponse) Reset()         { *m = QueryAllMarketPricesResponse{} }
func (m *QueryAllMarketPricesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMarketPricesResponse) ProtoMessage()    {}
func (*QueryAllMarketPricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_39ef88a1bd2264a7, []int{3}
}
func (m *QueryAllMarketPricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMarketPricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMarketPricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMarketPricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMarketPricesResponse.Merge(m, src)
}
func (m *QueryAllMarketPricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMarketPricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMarketPricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMarketPricesResponse proto.InternalMessageInfo

func (m *QueryAllMarketPricesResponse) GetMarketPrices() []MarketPrice {
	if m != nil {
		return m.MarketPrices
	}
	return nil
}

func (m *QueryAllMarketPricesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryMarketParamsRequest is request type for the Query/Params `MarketParams`
// RPC method.
type QueryMarketParamRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryMarketParamRequest) Reset()         { *m = QueryMarketParamRequest{} }
func (m *QueryMarketParamRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMarketParamRequest) ProtoMessage()    {}
func (*QueryMarketParamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_39ef88a1bd2264a7, []int{4}
}
func (m *QueryMarketParamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketParamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketParamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketParamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketParamRequest.Merge(m, src)
}
func (m *QueryMarketParamRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketParamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketParamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketParamRequest proto.InternalMessageInfo

func (m *QueryMarketParamRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryMarketParamResponse is response type for the Query/Params `MarketParams`
// RPC method.
type QueryMarketParamResponse struct {
	MarketParam MarketParam `protobuf:"bytes,1,opt,name=market_param,json=marketParam,proto3" json:"market_param"`
}

func (m *QueryMarketParamResponse) Reset()         { *m = QueryMarketParamResponse{} }
func (m *QueryMarketParamResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMarketParamResponse) ProtoMessage()    {}
func (*QueryMarketParamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_39ef88a1bd2264a7, []int{5}
}
func (m *QueryMarketParamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketParamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketParamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketParamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketParamResponse.Merge(m, src)
}
func (m *QueryMarketParamResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketParamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketParamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketParamResponse proto.InternalMessageInfo

func (m *QueryMarketParamResponse) GetMarketParam() MarketParam {
	if m != nil {
		return m.MarketParam
	}
	return MarketParam{}
}

// QueryAllMarketParamsRequest is request type for the Query/Params
// `AllMarketParams` RPC method.
type QueryAllMarketParamsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMarketParamsRequest) Reset()         { *m = QueryAllMarketParamsRequest{} }
func (m *QueryAllMarketParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMarketParamsRequest) ProtoMessage()    {}
func (*QueryAllMarketParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_39ef88a1bd2264a7, []int{6}
}
func (m *QueryAllMarketParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMarketParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMarketParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMarketParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMarketParamsRequest.Merge(m, src)
}
func (m *QueryAllMarketParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMarketParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMarketParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMarketParamsRequest proto.InternalMessageInfo

func (m *QueryAllMarketParamsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllMarketParamsResponse is response type for the Query/Params
// `AllMarketParams` RPC method.
type QueryAllMarketParamsResponse struct {
	MarketParams []MarketParam       `protobuf:"bytes,1,rep,name=market_params,json=marketParams,proto3" json:"market_params"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMarketParamsResponse) Reset()         { *m = QueryAllMarketParamsResponse{} }
func (m *QueryAllMarketParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMarketParamsResponse) ProtoMessage()    {}
func (*QueryAllMarketParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_39ef88a1bd2264a7, []int{7}
}
func (m *QueryAllMarketParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMarketParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMarketParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMarketParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMarketParamsResponse.Merge(m, src)
}
func (m *QueryAllMarketParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMarketParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMarketParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMarketParamsResponse proto.InternalMessageInfo

func (m *QueryAllMarketParamsResponse) GetMarketParams() []MarketParam {
	if m != nil {
		return m.MarketParams
	}
	return nil
}

func (m *QueryAllMarketParamsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryMarketPriceRequest)(nil), "nemo_network.prices.QueryMarketPriceRequest")
	proto.RegisterType((*QueryMarketPriceResponse)(nil), "nemo_network.prices.QueryMarketPriceResponse")
	proto.RegisterType((*QueryAllMarketPricesRequest)(nil), "nemo_network.prices.QueryAllMarketPricesRequest")
	proto.RegisterType((*QueryAllMarketPricesResponse)(nil), "nemo_network.prices.QueryAllMarketPricesResponse")
	proto.RegisterType((*QueryMarketParamRequest)(nil), "nemo_network.prices.QueryMarketParamRequest")
	proto.RegisterType((*QueryMarketParamResponse)(nil), "nemo_network.prices.QueryMarketParamResponse")
	proto.RegisterType((*QueryAllMarketParamsRequest)(nil), "nemo_network.prices.QueryAllMarketParamsRequest")
	proto.RegisterType((*QueryAllMarketParamsResponse)(nil), "nemo_network.prices.QueryAllMarketParamsResponse")
}

func init() { proto.RegisterFile("nemo_network/prices/query.proto", fileDescriptor_39ef88a1bd2264a7) }

var fileDescriptor_39ef88a1bd2264a7 = []byte{
	// 564 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xce, 0x86, 0xc2, 0xc1, 0x49, 0x41, 0x32, 0x48, 0x44, 0x69, 0xd9, 0x46, 0x0b, 0xea, 0x9f,
	0x88, 0x4d, 0x0a, 0x07, 0xae, 0xf4, 0x00, 0x42, 0x08, 0xa9, 0xec, 0x91, 0x4b, 0xe5, 0x6c, 0xac,
	0xad, 0xd5, 0xec, 0x7a, 0xbb, 0x76, 0x0a, 0x15, 0xe2, 0xc2, 0x13, 0x20, 0xc1, 0x8d, 0x1b, 0xcf,
	0xc0, 0x43, 0xf4, 0x58, 0x89, 0x0b, 0x27, 0x84, 0x12, 0xde, 0x03, 0x64, 0x7b, 0xa3, 0x7a, 0x93,
	0x2d, 0x75, 0x25, 0xd4, 0x5b, 0x32, 0xf3, 0x8d, 0xe7, 0x9b, 0xef, 0x9b, 0x49, 0xc0, 0x4a, 0x4a,
	0x13, 0xbe, 0x9b, 0x52, 0xf9, 0x86, 0xe7, 0xfb, 0x38, 0xcb, 0x59, 0x44, 0x05, 0x3e, 0x18, 0xd1,
	0xfc, 0x08, 0x65, 0x39, 0x97, 0x1c, 0xde, 0xb4, 0x01, 0xc8, 0x00, 0xda, 0xb7, 0x62, 0x1e, 0x73,
	0x9d, 0xc7, 0xea, 0x93, 0x81, 0xb6, 0x97, 0x63, 0xce, 0xe3, 0x21, 0xc5, 0x24, 0x63, 0x98, 0xa4,
	0x29, 0x97, 0x44, 0x32, 0x9e, 0x8a, 0x22, 0xbb, 0x19, 0x71, 0x91, 0x70, 0x81, 0xfb, 0x44, 0x50,
	0xd3, 0x01, 0x1f, 0xf6, 0xfa, 0x54, 0x92, 0x1e, 0xce, 0x48, 0xcc, 0x52, 0x0d, 0x2e, 0xb0, 0xab,
	0x55, 0xac, 0x12, 0x92, 0xef, 0x53, 0xb9, 0x9b, 0x91, 0x9c, 0x24, 0x2e, 0x38, 0xf5, 0xcd, 0xe0,
	0x82, 0x0d, 0x70, 0xfb, 0x95, 0xea, 0xf8, 0x52, 0xa7, 0x76, 0x54, 0x26, 0xa4, 0x07, 0x23, 0x2a,
	0x24, 0xbc, 0x0e, 0xea, 0x6c, 0xd0, 0xf2, 0x3a, 0xde, 0xfa, 0x62, 0x58, 0x67, 0x83, 0x80, 0x82,
	0xd6, 0x3c, 0x54, 0x64, 0x3c, 0x15, 0x14, 0x3e, 0x07, 0x4d, 0xfb, 0x71, 0x5d, 0xd5, 0xd8, 0xea,
	0xa0, 0x0a, 0x89, 0x90, 0x55, 0xbf, 0xbd, 0x70, 0xfc, 0x73, 0xa5, 0x16, 0x36, 0x92, 0xd3, 0x50,
	0x40, 0xc1, 0x92, 0x6e, 0xf3, 0x64, 0x38, 0xb4, 0x90, 0x62, 0xca, 0xea, 0x29, 0x00, 0xa7, 0xa2,
	0x14, 0x7d, 0x56, 0x91, 0x51, 0x10, 0x29, 0x05, 0x91, 0xf1, 0xa8, 0x50, 0x10, 0xed, 0x90, 0x78,
	0x3a, 0x51, 0x68, 0x55, 0x06, 0xdf, 0x3c, 0xb0, 0x5c, 0xdd, 0xa7, 0x18, 0xe9, 0x05, 0x58, 0xb4,
	0x47, 0x12, 0x2d, 0xaf, 0x73, 0xe5, 0x02, 0x33, 0x35, 0xad, 0x99, 0x04, 0x7c, 0x56, 0x62, 0x5d,
	0xd7, 0xac, 0xd7, 0xce, 0x65, 0x6d, 0x98, 0x94, 0x68, 0xcf, 0xf8, 0xa5, 0x1c, 0x77, 0xf4, 0xcb,
	0x40, 0xe7, 0xfd, 0x52, 0x71, 0x17, 0xbf, 0x14, 0x6e, 0xc6, 0x2f, 0x15, 0xaa, 0xf0, 0x4b, 0x85,
	0x2f, 0xc3, 0xaf, 0xa2, 0xcf, 0xbc, 0x5f, 0x3a, 0xe1, 0xe2, 0x97, 0x35, 0x53, 0xd3, 0x9a, 0xe9,
	0xff, 0xf9, 0xb5, 0xf5, 0x67, 0x01, 0x5c, 0xd5, 0xb4, 0xe1, 0x67, 0x0f, 0x34, 0xac, 0x35, 0x81,
	0xf7, 0x2b, 0x89, 0x9d, 0x71, 0x8c, 0xed, 0xae, 0x23, 0xda, 0x50, 0x08, 0xd6, 0x3f, 0x7c, 0xff,
	0xfd, 0xa9, 0x1e, 0xc0, 0x0e, 0x56, 0x65, 0xdd, 0xca, 0xdf, 0x01, 0xfc, 0x8e, 0x0d, 0xde, 0xc3,
	0x2f, 0x1e, 0xb8, 0x31, 0x73, 0x02, 0xf0, 0xc1, 0xd9, 0xcd, 0xaa, 0xaf, 0xb2, 0xdd, 0xbb, 0x40,
	0x45, 0x41, 0xf1, 0xae, 0xa6, 0x78, 0x07, 0x2e, 0xfd, 0x83, 0xa2, 0x62, 0xd7, 0xb0, 0xbc, 0x72,
	0x10, 0xcd, 0xba, 0x08, 0x07, 0xd1, 0xec, 0xa3, 0x08, 0xb0, 0x66, 0xb4, 0x01, 0xd7, 0x2a, 0x19,
	0x99, 0xad, 0x2a, 0x69, 0xf7, 0xb5, 0xa4, 0x9d, 0xd9, 0x1c, 0x27, 0xed, 0xec, 0x0b, 0x71, 0xd3,
	0xae, 0xb4, 0xeb, 0xc1, 0xa6, 0x66, 0x7a, 0x0f, 0x06, 0xe7, 0x33, 0xdd, 0x0e, 0x8f, 0xc7, 0xbe,
	0x77, 0x32, 0xf6, 0xbd, 0x5f, 0x63, 0xdf, 0xfb, 0x38, 0xf1, 0x6b, 0x27, 0x13, 0xbf, 0xf6, 0x63,
	0xe2, 0xd7, 0x5e, 0x3f, 0x8e, 0x99, 0xdc, 0x1b, 0xf5, 0x51, 0xc4, 0x93, 0xf2, 0x3b, 0x87, 0x8f,
	0xba, 0xd1, 0x1e, 0x61, 0x29, 0xd6, 0xff, 0x11, 0x11, 0x1f, 0xe2, 0xb7, 0xd3, 0xb7, 0xe5, 0x51,
	0x46, 0x45, 0xff, 0x9a, 0x4e, 0x3c, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x3f, 0xa9, 0x43,
	0x24, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a MarketPrice by id.
	MarketPrice(ctx context.Context, in *QueryMarketPriceRequest, opts ...grpc.CallOption) (*QueryMarketPriceResponse, error)
	// Queries a list of MarketPrice items.
	AllMarketPrices(ctx context.Context, in *QueryAllMarketPricesRequest, opts ...grpc.CallOption) (*QueryAllMarketPricesResponse, error)
	// Queries a MarketParam by id.
	MarketParam(ctx context.Context, in *QueryMarketParamRequest, opts ...grpc.CallOption) (*QueryMarketParamResponse, error)
	// Queries a list of MarketParam items.
	AllMarketParams(ctx context.Context, in *QueryAllMarketParamsRequest, opts ...grpc.CallOption) (*QueryAllMarketParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) MarketPrice(ctx context.Context, in *QueryMarketPriceRequest, opts ...grpc.CallOption) (*QueryMarketPriceResponse, error) {
	out := new(QueryMarketPriceResponse)
	err := c.cc.Invoke(ctx, "/nemo_network.prices.Query/MarketPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllMarketPrices(ctx context.Context, in *QueryAllMarketPricesRequest, opts ...grpc.CallOption) (*QueryAllMarketPricesResponse, error) {
	out := new(QueryAllMarketPricesResponse)
	err := c.cc.Invoke(ctx, "/nemo_network.prices.Query/AllMarketPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MarketParam(ctx context.Context, in *QueryMarketParamRequest, opts ...grpc.CallOption) (*QueryMarketParamResponse, error) {
	out := new(QueryMarketParamResponse)
	err := c.cc.Invoke(ctx, "/nemo_network.prices.Query/MarketParam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllMarketParams(ctx context.Context, in *QueryAllMarketParamsRequest, opts ...grpc.CallOption) (*QueryAllMarketParamsResponse, error) {
	out := new(QueryAllMarketParamsResponse)
	err := c.cc.Invoke(ctx, "/nemo_network.prices.Query/AllMarketParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a MarketPrice by id.
	MarketPrice(context.Context, *QueryMarketPriceRequest) (*QueryMarketPriceResponse, error)
	// Queries a list of MarketPrice items.
	AllMarketPrices(context.Context, *QueryAllMarketPricesRequest) (*QueryAllMarketPricesResponse, error)
	// Queries a MarketParam by id.
	MarketParam(context.Context, *QueryMarketParamRequest) (*QueryMarketParamResponse, error)
	// Queries a list of MarketParam items.
	AllMarketParams(context.Context, *QueryAllMarketParamsRequest) (*QueryAllMarketParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) MarketPrice(ctx context.Context, req *QueryMarketPriceRequest) (*QueryMarketPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketPrice not implemented")
}
func (*UnimplementedQueryServer) AllMarketPrices(ctx context.Context, req *QueryAllMarketPricesRequest) (*QueryAllMarketPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllMarketPrices not implemented")
}
func (*UnimplementedQueryServer) MarketParam(ctx context.Context, req *QueryMarketParamRequest) (*QueryMarketParamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketParam not implemented")
}
func (*UnimplementedQueryServer) AllMarketParams(ctx context.Context, req *QueryAllMarketParamsRequest) (*QueryAllMarketParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllMarketParams not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_MarketPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MarketPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nemo_network.prices.Query/MarketPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MarketPrice(ctx, req.(*QueryMarketPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllMarketPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMarketPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllMarketPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nemo_network.prices.Query/AllMarketPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllMarketPrices(ctx, req.(*QueryAllMarketPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MarketParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MarketParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nemo_network.prices.Query/MarketParam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MarketParam(ctx, req.(*QueryMarketParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllMarketParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMarketParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllMarketParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nemo_network.prices.Query/AllMarketParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllMarketParams(ctx, req.(*QueryAllMarketParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nemo_network.prices.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MarketPrice",
			Handler:    _Query_MarketPrice_Handler,
		},
		{
			MethodName: "AllMarketPrices",
			Handler:    _Query_AllMarketPrices_Handler,
		},
		{
			MethodName: "MarketParam",
			Handler:    _Query_MarketParam_Handler,
		},
		{
			MethodName: "AllMarketParams",
			Handler:    _Query_AllMarketParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nemo_network/prices/query.proto",
}

func (m *QueryMarketPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MarketPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMarketPricesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMarketPricesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMarketPricesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMarketPricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMarketPricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMarketPricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketPrices) > 0 {
		for iNdEx := len(m.MarketPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MarketPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketParamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketParamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketParamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketParamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketParamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketParamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MarketParam.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMarketParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMarketParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMarketParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMarketParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMarketParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMarketParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketParams) > 0 {
		for iNdEx := len(m.MarketParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MarketParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryMarketPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryMarketPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MarketPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMarketPricesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMarketPricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MarketPrices) > 0 {
		for _, e := range m.MarketPrices {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMarketParamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryMarketParamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MarketParam.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMarketParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMarketParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MarketParams) > 0 {
		for _, e := range m.MarketParams {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryMarketPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarketPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMarketPricesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMarketPricesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMarketPricesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMarketPricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMarketPricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMarketPricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketPrices = append(m.MarketPrices, MarketPrice{})
			if err := m.MarketPrices[len(m.MarketPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketParamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketParamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketParamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketParamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketParamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketParamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarketParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMarketParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMarketParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMarketParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMarketParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMarketParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMarketParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketParams = append(m.MarketParams, MarketParam{})
			if err := m.MarketParams[len(m.MarketParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
