// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nemo_network/daemons/bridge/bridge.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/nemo-network/v4-chain/protocol/x/bridge/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AddBridgeEventsRequest is a request message that contains a list of new
// bridge events. The events should be contiguous and sorted by (unique) id.
type AddBridgeEventsRequest struct {
	BridgeEvents []types.BridgeEvent `protobuf:"bytes,1,rep,name=bridge_events,json=bridgeEvents,proto3" json:"bridge_events"`
}

func (m *AddBridgeEventsRequest) Reset()         { *m = AddBridgeEventsRequest{} }
func (m *AddBridgeEventsRequest) String() string { return proto.CompactTextString(m) }
func (*AddBridgeEventsRequest) ProtoMessage()    {}
func (*AddBridgeEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22bf28f9a3f4981c, []int{0}
}
func (m *AddBridgeEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddBridgeEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddBridgeEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddBridgeEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddBridgeEventsRequest.Merge(m, src)
}
func (m *AddBridgeEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddBridgeEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddBridgeEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddBridgeEventsRequest proto.InternalMessageInfo

func (m *AddBridgeEventsRequest) GetBridgeEvents() []types.BridgeEvent {
	if m != nil {
		return m.BridgeEvents
	}
	return nil
}

// AddBridgeEventsResponse is a response message for BridgeEventRequest.
type AddBridgeEventsResponse struct {
}

func (m *AddBridgeEventsResponse) Reset()         { *m = AddBridgeEventsResponse{} }
func (m *AddBridgeEventsResponse) String() string { return proto.CompactTextString(m) }
func (*AddBridgeEventsResponse) ProtoMessage()    {}
func (*AddBridgeEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22bf28f9a3f4981c, []int{1}
}
func (m *AddBridgeEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddBridgeEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddBridgeEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddBridgeEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddBridgeEventsResponse.Merge(m, src)
}
func (m *AddBridgeEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddBridgeEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddBridgeEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddBridgeEventsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AddBridgeEventsRequest)(nil), "nemo_network.daemons.bridge.AddBridgeEventsRequest")
	proto.RegisterType((*AddBridgeEventsResponse)(nil), "nemo_network.daemons.bridge.AddBridgeEventsResponse")
}

func init() {
	proto.RegisterFile("nemo_network/daemons/bridge/bridge.proto", fileDescriptor_22bf28f9a3f4981c)
}

var fileDescriptor_22bf28f9a3f4981c = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xc8, 0x4b, 0xcd, 0xcd,
	0x8f, 0xcf, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x4f, 0x49, 0x4c, 0xcd, 0xcd, 0xcf, 0x2b,
	0xd6, 0x4f, 0x2a, 0xca, 0x4c, 0x49, 0x4f, 0x85, 0x52, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42,
	0xd2, 0xc8, 0x2a, 0xf5, 0xa0, 0x2a, 0xf5, 0x20, 0x4a, 0xa4, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1,
	0xea, 0xf4, 0x41, 0x2c, 0x88, 0x16, 0x29, 0x35, 0x14, 0xc3, 0x51, 0x0c, 0x8d, 0x4f, 0x2d, 0x4b,
	0xcd, 0x2b, 0x81, 0xa8, 0x53, 0x4a, 0xe5, 0x12, 0x73, 0x4c, 0x49, 0x71, 0x02, 0x4b, 0xb8, 0x82,
	0xc4, 0x8b, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xbc, 0xb9, 0x78, 0x91, 0xd5, 0x17,
	0x4b, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x1b, 0x29, 0xe8, 0xa1, 0x38, 0x06, 0xea, 0x4e, 0x24, 0x03,
	0x9c, 0x58, 0x4e, 0xdc, 0x93, 0x67, 0x08, 0xe2, 0x49, 0x42, 0x32, 0x53, 0x49, 0x92, 0x4b, 0x1c,
	0xc3, 0x9a, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0xa3, 0x5e, 0x46, 0x2e, 0x5e, 0x88, 0x44, 0x70,
	0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x50, 0x0d, 0x17, 0x3f, 0x9a, 0x62, 0x21, 0x63, 0x3d, 0x3c,
	0x41, 0xa0, 0x87, 0xdd, 0x07, 0x52, 0x26, 0xa4, 0x69, 0x82, 0xb8, 0xc7, 0x29, 0xec, 0xc4, 0x23,
	0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2,
	0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x6c, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4,
	0x92, 0xf3, 0x73, 0xf5, 0x41, 0x26, 0xeb, 0xc2, 0x82, 0xb7, 0xcc, 0x44, 0x37, 0x39, 0x23, 0x31,
	0x33, 0x4f, 0x1f, 0x1c, 0xa6, 0xc9, 0xf9, 0x39, 0xe8, 0xb1, 0x99, 0x58, 0x90, 0x99, 0xc4, 0x06,
	0x96, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x72, 0x7a, 0x7e, 0xf7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BridgeServiceClient is the client API for BridgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BridgeServiceClient interface {
	// Sends a list of newly recognized bridge events.
	AddBridgeEvents(ctx context.Context, in *AddBridgeEventsRequest, opts ...grpc.CallOption) (*AddBridgeEventsResponse, error)
}

type bridgeServiceClient struct {
	cc grpc1.ClientConn
}

func NewBridgeServiceClient(cc grpc1.ClientConn) BridgeServiceClient {
	return &bridgeServiceClient{cc}
}

func (c *bridgeServiceClient) AddBridgeEvents(ctx context.Context, in *AddBridgeEventsRequest, opts ...grpc.CallOption) (*AddBridgeEventsResponse, error) {
	out := new(AddBridgeEventsResponse)
	err := c.cc.Invoke(ctx, "/nemo_network.daemons.bridge.BridgeService/AddBridgeEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BridgeServiceServer is the server API for BridgeService service.
type BridgeServiceServer interface {
	// Sends a list of newly recognized bridge events.
	AddBridgeEvents(context.Context, *AddBridgeEventsRequest) (*AddBridgeEventsResponse, error)
}

// UnimplementedBridgeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBridgeServiceServer struct {
}

func (*UnimplementedBridgeServiceServer) AddBridgeEvents(ctx context.Context, req *AddBridgeEventsRequest) (*AddBridgeEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBridgeEvents not implemented")
}

func RegisterBridgeServiceServer(s grpc1.Server, srv BridgeServiceServer) {
	s.RegisterService(&_BridgeService_serviceDesc, srv)
}

func _BridgeService_AddBridgeEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBridgeEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServiceServer).AddBridgeEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nemo_network.daemons.bridge.BridgeService/AddBridgeEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServiceServer).AddBridgeEvents(ctx, req.(*AddBridgeEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BridgeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nemo_network.daemons.bridge.BridgeService",
	HandlerType: (*BridgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBridgeEvents",
			Handler:    _BridgeService_AddBridgeEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nemo_network/daemons/bridge/bridge.proto",
}

func (m *AddBridgeEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddBridgeEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddBridgeEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgeEvents) > 0 {
		for iNdEx := len(m.BridgeEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BridgeEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddBridgeEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddBridgeEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddBridgeEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintBridge(dAtA []byte, offset int, v uint64) int {
	offset -= sovBridge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddBridgeEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BridgeEvents) > 0 {
		for _, e := range m.BridgeEvents {
			l = e.Size()
			n += 1 + l + sovBridge(uint64(l))
		}
	}
	return n
}

func (m *AddBridgeEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovBridge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBridge(x uint64) (n int) {
	return sovBridge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddBridgeEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddBridgeEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddBridgeEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeEvents = append(m.BridgeEvents, types.BridgeEvent{})
			if err := m.BridgeEvents[len(m.BridgeEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddBridgeEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddBridgeEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddBridgeEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBridge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBridge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBridge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBridge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBridge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBridge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBridge = fmt.Errorf("proto: unexpected end of group")
)
